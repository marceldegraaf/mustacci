#!/usr/bin/env ruby

require 'json'
require 'yaml'
require 'zmq'
require 'pty'

QUEUE = "tcp://127.0.0.1:9000"
CONFIG = YAML.load(File.open("repositories.yml"))

def log(message)
  $stdout.puts "\e[33m[#{Time.now}] #{message}\e[0m"
end

class SkipBuild < RuntimeError
end

def run(data)
  payload = JSON.parse(data)

  skip = Proc.new { |key| raise SkipBuild, "Missing key: #{key}" }

  repo = payload.fetch "repository", &skip
  url  = repo.fetch "url", &skip
  sha  = payload.fetch "after", &skip

  log "Building #{url.inspect}"

  path = CONFIG[url]["path"]

  PTY.spawn "./script/runner #{sha} #{url} #{path}" do |read, write, pid|
    read.each_char do |char|
      # TODO send this to a websocket
      print char
    end
  end

  log "Done with this build."

end

puts "Listening for builds on #{QUEUE}"

context = ZMQ::Context.new(1)
inbound = context.socket(ZMQ::UPSTREAM)
inbound.bind QUEUE

loop do
  trap('INT') do
    log 'Exit signal received, shutting down...'
    inbound.close
    exit
  end

  data = inbound.recv
  begin
    run data
  rescue SkipBuild => error
    log "Skipping build because invalid payload. #{error}"
  rescue Exception => error
    $stderr.puts "\e[31m[#{Time.now}] #{error.class}: #{error}\e[0m"
    error.backtrace.each do |line|
      $stderr.puts "      \e[30m#{line}\e[0m"
    end
    inbound.close
    exit 1
  end
end
